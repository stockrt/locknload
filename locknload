#!/bin/bash

# Copyright (C) 2012-2014 Rogério Carvalho Schneider <stockrt@gmail.com>
#
# This file is part of locknload.
#
# locknload is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# locknload is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with locknload.  If not, see <http://www.gnu.org/licenses/>.
#
#
# locknload
#
# Created:  Jan 21, 2012
# Author:   Rogério Carvalho Schneider <stockrt@gmail.com>

# Requires:
#   - nfslock / lockd (nfs-utils)
#   - flock (util-linux)
#   - lockfile (procmail)
#   - rw access to the lockdir
#   - logger


#############
## CONFIGS ##
#############

# Exit on command errors.
#set -e
# Exit on variable expansion errors.
set -u


#############
## DEFINES ##
#############

# Version number.
version="0.1.1"

# Program name.
program="$(basename "$0")"

# Tempdir.
tempdir="${TMP:-/tmp}"

# Say no more.
verbosity=0

# Defaults logging to console.
logging_strategy="console_only"
logfile="None"
logger_options="None"
logger_pri="None"
logger_tag="None"
# If logging to file or logger you can also, optionally, log to console too.
output_log_to_console="false"

# Lock.
lockmode="flock"
lockdir="$tempdir/lock"

# Do this.
command="None"


###############
## FUNCTIONS ##
###############

usage () {
    echo "
Usage: locknload [-v] [-o logfile] [-l pri:tag] [-t] [-m lockmode] [-d lockdir] -c \"command\"
    -h
        Display this help text and exit.
    -V
        Display version number and exit.
    -v
        Verbosity level. Can be used more than once to increase verbosity.
        Default: $verbosity
    -o logfile
        If defined all the execution output will be redirected to the logfile.
        Default: $logfile
    -l pri:tag
        If defined will forward log messages to syslog through logger using
        priority 'pri' (facility.level) and 'tag', both separated from each
        other by a ':' signal. Example: -l user.info:myapp
        Default: $logger_options
    -t
        Output logs to console even if logging to file and/or logger.
        Default: $output_log_to_console
    -m lockmode
        Lock acquisition mode. Available lockmodes are:
            flock       : Uses flock command from util-linux package.
        Lockmodes not yet implemented:
            lockfile    : Uses lockfile command from procmail package.
            hardlink    : Uses the technique described on open(2).
            mkdir       : Uses a directory as a lock.
        Default: $lockmode
    -d lockdir
        Directory holding the locks. Should be an NFS directory shared among the
        servers running concurrent commands.
        Lockfiles found inside the lockdir are defined using some kind of
        textual hash derived from the original command. Inside the lockfile you
        will find the original command, the host which got the lock and the
        start/finish/fail execution time.
        Default: $lockdir
    -c command
        The command to be run itself. If you are trying to run something more
        complex, perhaps multiple commands with \"&&\" or \";\" or commands with
        parameters, you should use quoting to encapsulate the command.
        Default: $command"
}

# Log arbitrary messages if verbosity requirements are met.
log () {
    verbositylevel=$1
    shift
    logmessage="$@"

    if [[ $verbosity -ge $verbositylevel ]]
    then
        echo "$logmessage"
    fi
}

splash () {
    if [[ "$logging_strategy" == "console_only" && $verbosity -ge 2 ]]
    then
        # When using console_only separate splash screen with empty lines.
        echo
    fi
    log 2 "Program          : $program"
    log 2 "Command          : $command"
    log 2 "Verbosity        : $verbosity"
    log 2 "Logging strategy : $logging_strategy"
    log 2 "Logfile          : $logfile"
    log 2 "Logger options   : $logger_options"
    log 2 "Logger pri       : $logger_pri"
    log 2 "Logger tag       : $logger_tag"
    log 2 "Console log      : $output_log_to_console"
    log 2 "Lockmode         : $lockmode"
    log 2 "Lockdir          : $lockdir"
    log 2 "Lockfile         : $lockfile"
    log 2 "Tempdir          : $tempdir"
    log 2 "Tempfile         : $tempfile"
    if [[ "$logging_strategy" == "console_only" && $verbosity -ge 2 ]]
    then
        # When using console_only separate splash screen with empty lines.
        echo
    fi
}


##########
## ARGS ##
##########

while getopts hVvo:l:tm:d:c: arg
do
    case $arg in
        h)
            usage
            exit 0
            ;;
        V)
            echo "$program version: $version"
            exit 0
            ;;
        v)
            let "verbosity+=1"
            ;;
        o)
            logfile="$OPTARG"
            ;;
        l)
            logger_options="$OPTARG"
            logger_pri="${logger_options%:*}" # cut from right until the first occurrence of pattern.
            logger_tag="${logger_options#*:}" # cut from left until the first occurrence of pattern.
            ;;
        t)
            output_log_to_console="true"
            ;;
        m)
            lockmode="$OPTARG"
            ;;
        d)
            lockdir="$OPTARG"
            ;;
        c)
            command="$OPTARG"
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done
shift $(($OPTIND - 1))

# Obligatory argument check.
if [[ "$command" == "None" ]]
then
    echo "Command must be specified with -c \"command\"."
    usage
    exit 1
fi

# Invalid lockmode options check.
if [[ "$lockmode" != "flock" ]]
then
    echo "Invalid lockmode: -m $lockmode"
    usage
    exit 1
fi

# Invalid logger options check.
if [[ "$logger_options" != "None" ]]
then
    err_flag="false"

    # Matches format pri:tag (facility.level:tag) (user.info:myapp as well as user.info:myapp-be).
    if [[ ! "$logger_options" =~ ^[[:alnum:]]+\.[[:alnum:]]+:([[:alnum:]]|[[:punct:]])+$ ]]
    then
        err_flag="true"
    fi

    # Has no more than one ':' symbol.
    x="${logger_options//[^:]/}"
    count=${#x}
    if [[ $count -gt 1 ]]
    then
        err_flag="true"
    fi

    # Has no more than one '.' symbol for looger_pri.
    x="${logger_pri//[^\.]/}"
    count=${#x}
    if [[ $count -ne 1 ]]
    then
        err_flag="true"
    fi

    if [[ "$err_flag" == "true" ]]
    then
        echo "Invalid logger_options: -l $logger_options"
        echo "Found logger_pri: $logger_pri"
        echo "Found logger_tag: $logger_tag"
        usage
        exit 1
    fi
fi


##########
## MAIN ##
##########

# Logging strategy.
if [[ "$logfile" == "None" && "$logger_options" == "None" ]]
then
    logging_strategy="console_only"
elif [[ "$logfile" != "None" && "$logger_options" == "None" ]]
then
    logging_strategy="logfile_only"
elif [[ "$logfile" == "None" && "$logger_options" != "None" ]]
then
    logging_strategy="logger_only"
elif [[ "$logfile" != "None" && "$logger_options" != "None" ]]
then
    logging_strategy="logfile_and_logger"
fi

# Pre logfile. Logdir discovery.
if [[ "$logging_strategy" =~ ^logfile_.* ]]
then
    log 4 "Calculating logdir for logfile: $logfile"
    curdir="$PWD"
    cd "$(dirname "$logfile")"
    logfile="$PWD/$(basename "$logfile")"
    log 4 "Calculated logdir for logfile: $logfile"
    cd "$curdir"
    log 4 "Redirecting output (stdout and stderr) to logfile: $logfile"
fi

# Syslog format.
#echo "$(date +"%b %d %H:%M:%S") $HOSTNAME $program[$$]: ($command): $logmessage"
# Slacker and yet more useful format.
#echo "$(date) $HOSTNAME $program[$$]: ($command): $logmessage"

# Log formatting and redirection.
if [[ "$logging_strategy" == "console_only" ]]
then
    # Console only.
    # Do nothing.
    :
elif [[ "$logging_strategy" == "logfile_only" ]]
then
    # Logfile only.
    if [[ "$output_log_to_console" == "true" ]]
    then
        # Also, send logs to console.
        exec > >(\
            while read line
            do
                echo "$(date) $HOSTNAME $program[$$]: ($command): $line"
            done | tee -a "$logfile"
        ) 2>&1
    else
        # No console, thanks.
        exec > >(\
            while read line
            do
                echo "$(date) $HOSTNAME $program[$$]: ($command): $line"
            done >> $logfile
        ) 2>&1
    fi
elif [[ "$logging_strategy" == "logger_only" ]]
then
    # Logger only.
    if [[ "$output_log_to_console" == "true" ]]
    then
        # Also, send logs to console.
        exec > >(\
            while read line
            do
                echo "$program[$$]: ($command): $line"
            done | logger -p "$logger_pri" -t "$logger_tag" -s 2>&1
        ) 2>&1
    else
        # No console, thanks.
        exec > >(\
            while read line
            do
                echo "$program[$$]: ($command): $line"
            done | logger -p "$logger_pri" -t "$logger_tag"
        ) 2>&1
    fi
elif [[ "$logging_strategy" == "logfile_and_logger" ]]
then
    # Both logfile and logger.
    if [[ "$output_log_to_console" == "true" ]]
    then
        # Also, send logs to console.
        exec > >(\
            tee -a >(\
                while read line
                do
                    echo "$program[$$]: ($command): $line"
                done | logger -p "$logger_pri" -t "$logger_tag"
            ) |\
                while read line
                do
                    echo "$(date) $HOSTNAME $program[$$]: ($command): $line"
                done | tee -a "$logfile"
        ) 2>&1
    else
        # No console, thanks.
        exec > >(\
            tee -a >(\
                while read line
                do
                    echo "$program[$$]: ($command): $line"
                done | logger -p "$logger_pri" -t "$logger_tag"
            ) |\
                while read line
                do
                    echo "$(date) $HOSTNAME $program[$$]: ($command): $line"
                done >> "$logfile"
        ) 2>&1
    fi
fi

# Start log.
if [[ "$logging_strategy" =~ ^(logfile_.*|logger_.*) ]]
then
    # When using logfile or logger or both it is nice to have boundaries of application started/finished logged.
    log 0 "Started execution"
else
    log 1 "Started execution"
fi

# Lockdir.
log 2 "Creating lockdir: $lockdir"
if [[ ! -d "$lockdir" ]]
then
    mkdir -p "$lockdir"
    log 3 "Created lockdir: $lockdir"
else
    log 3 "Lockdir already exists: $lockdir"
fi

# Tempfile creation.
log 2 "Creating tempfile"
tempfile="$(mktemp $tempdir/tmp.XXXXXXXXXXXXXXXXXXXX)"
log 3 "Created tempfile: $tempfile"

# Tempfile permissions.
log 2 "Changing permissions of tempfile: $tempfile"
chmod 755 "$tempfile"
log 3 "Changed permissions of tempfile: $tempfile"

# Lock.
lockname="$(sed 's/[^[:alnum:]]/_/g' <<< "$command" | tr -s _)" # change all non alphanumeric characters by '_' and squeeze repeated ones.
lockname="${lockname#_}" # remove first '_' if found.
lockname="${lockname%_}" # remove last '_' if found.
lockfile="$lockdir/$lockname.lock"

# Lock data.
lockdata="$command
\$HOSTNAME
start:  \$(date)"

######################
## Temporary script ##
######################
log 2 "Creating command script using tempfile: $tempfile"
echo "#!/bin/bash

# Exit on command errors.
#set -e
# Exit on variable expansion errors.
set -u

# Information into lockfile.
echo \"$lockdata\" > \"$lockfile\"

# Running the command itself.
$command
ret=\$?

# More information into lockfile.
if [[ \$ret -eq 0 ]]
then
    echo \"finish: \$(date)\" >> \"$lockfile\"
else
    echo \"fail:   \$(date)\" >> \"$lockfile\"
fi

# And yet more information into lockfile.
echo \"return code: \$ret\" >> \"$lockfile\"

# Signaling that we succeded acquiring the lock.
> \${0}.ok

# Propagating the return code from the command.
exit \$ret" > "$tempfile"
log 3 "Created command script using tempfile: $tempfile"
######################
## Temporary script ##
######################

# Splash screen.
splash

###################
## Lock and Load ##
###################
log 2 "Starting execution of locked command: $command"
log 2 "Acquiring lock on lockfile: $lockfile"

# Lock.
flock -n "$lockfile" "$tempfile"
ret=$?

# Return.
if [[ -f "${tempfile}.ok" ]]
then
    if [[ "$logging_strategy" =~ ^(logfile_.*|logger_.*) ]]
    then
        # When using logfile or logger or both it is nice to have lock handling logged.
        log 0 "Acquired lock on lockfile: $lockfile"
    else
        log 1 "Acquired lock on lockfile: $lockfile"
    fi
else
    if [[ "$logging_strategy" =~ ^(logfile_.*|logger_.*) ]]
    then
        # When using logfile or logger or both it is nice to have lock handling logged.
        log 0 "Could not acquire lock on lockfile: $lockfile"
        log 3 "Finished execution of locked command: $command"
    else
        log 1 "Could not acquire lock on lockfile: $lockfile"
        log 3 "Finished execution of locked command: $command"
    fi
fi
###################
## Lock and Load ##
###################

# Tempfile cleanup.
log 2 "Cleaning tempfile: $tempfile"
rm -f "$tempfile" "${tempfile}.ok"
log 3 "Cleaned tempfile: $tempfile"

# Last log.
if [[ "$logging_strategy" =~ ^(logfile_.*|logger_.*) ]]
then
    # When using logfile or logger or both it is nice to have boundaries of application started/finished logged.
    log 0 "Finished execution. Return code: $ret"
else
    log 1 "Finished execution. Return code: $ret"
fi

# Return code from command.
exit $ret
